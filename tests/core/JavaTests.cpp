/******************************************************************
*
* Round for C++
*
* Copyright (C) Satoshi Konno 2014
*
* This is licensed under BSD-style license, see file COPYING.
*
******************************************************************/

#include <boost/test/unit_test.hpp>

#include <vector>
#include <round/core/impl/Java.h>

#include "TestScript.h"

using namespace std;
using namespace Round;

BOOST_AUTO_TEST_SUITE(script)

/*
public class echo extends Object {
 public echo() {
 }
 public String run(String params) {
  return params;
 }
}
*/
// java version "1.7.0_51"
static const std::string TEST_ECHO_BASE64_JDK17_CLASS = "echo";
static const std::string TEST_ECHO_BASE64_JDK17_CODE = "yv66vgAAADMADwoAAwAMBwANBwAOAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAA3J1bgEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAKU291cmNlRmlsZQEACWVjaG8uamF2YQwABAAFAQAEZWNobwEAEGphdmEvbGFuZy9PYmplY3QAIQACAAMAAAAAAAIAAQAEAAUAAQAGAAAAIQABAAEAAAAFKrcAAbEAAAABAAcAAAAKAAIAAAACAAQAAwABAAgACQABAAYAAAAaAAEAAgAAAAIrsAAAAAEABwAAAAYAAQAAAAUAAQAKAAAAAgAL";
static size_t TEST_ECHO_HEX_JDK17_CODE_LEN = 273;
static byte TEST_ECHO_HEX_JDK17_CODE[] = {
  0xca, 0xfe, 0xba, 0xbe, 0x00, 0x00, 0x00, 0x33, 0x00, 0x0f, 0x0a, 0x00, 0x03, 0x00, 0x0c, 0x07,
  0x00, 0x0d, 0x07, 0x00, 0x0e, 0x01, 0x00, 0x06, 0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00,
  0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69,
  0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x03,
  0x72, 0x75, 0x6e, 0x01, 0x00, 0x26, 0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e,
  0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x29, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f,
  0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x01, 0x00, 0x0a, 0x53,
  0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x09, 0x65, 0x63, 0x68, 0x6f,
  0x2e, 0x6a, 0x61, 0x76, 0x61, 0x0c, 0x00, 0x04, 0x00, 0x05, 0x01, 0x00, 0x04, 0x65, 0x63, 0x68,
  0x6f, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62,
  0x6a, 0x65, 0x63, 0x74, 0x00, 0x21, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x01, 0x00, 0x04, 0x00, 0x05, 0x00, 0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0x21, 0x00, 0x01,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x03, 0x00,
  0x01, 0x00, 0x08, 0x00, 0x09, 0x00, 0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x01, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x2b, 0xb0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x0b
};

BOOST_AUTO_TEST_CASE(JavaEngineClassLoaderBase64Test) {
  Error err;
  JavaEngine javaEngine;

  std::vector<std::string> classNames;
  std::vector<byte *> classCodes;
  std::vector<size_t> classCodeLengths;
  std::vector<int> classCodeEncords;
  
  classNames.push_back(TEST_ECHO_BASE64_JDK17_CLASS);
  classCodes.push_back((byte *)TEST_ECHO_BASE64_JDK17_CODE.c_str());
  classCodeLengths.push_back(TEST_ECHO_BASE64_JDK17_CODE.length());
  classCodeEncords.push_back(Script::ENCODING_BASE64);
    
  classNames.push_back(TEST_ECHO_BASE64_JDK17_CLASS);
  classCodes.push_back(TEST_ECHO_HEX_JDK17_CODE);
  classCodeLengths.push_back(TEST_ECHO_HEX_JDK17_CODE_LEN);
  classCodeEncords.push_back(Script::ENCODING_NONE);
  
  size_t nTestCodeCnt = classNames.size();
  for (size_t n=0; n<nTestCodeCnt; n++) {
    Script *testScript = new Script(JavaEngine::LANGUAGE, classNames.at(n), classCodes.at(n), classCodeLengths.at(n));
    testScript->setEncording(classCodeEncords.at(n));
    //BOOST_CHECK(javaEngine.compile(testScript));
    delete testScript;
  }
}

BOOST_AUTO_TEST_CASE(JavaEngineEchoTest) {
  Error err;
  ScriptManager scriptMgr;
/*
  BOOST_CHECK(scriptMgr.setEngine(new JavaEngine()));
  BOOST_CHECK(scriptMgr.hasEngine(JavaEngine::LANGUAGE));
  
  BOOST_CHECK(scriptMgr.setScript(Test::SCRIPT_ECHO_NAME, JavaEngine::LANGUAGE, Round::Test::JAVA_ECHO_CODE, &err));
  BOOST_CHECK(scriptMgr.hasScript(Test::SCRIPT_ECHO_NAME));
  

  Test::ScriptTestController scriptTestController;
  scriptTestController.runEchoMethodTest(Test::SCRIPT_ECHO_NAME, &scriptMgr);
*/
}

BOOST_AUTO_TEST_SUITE_END()
